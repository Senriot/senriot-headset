import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJvmPlugin
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
    base
    kotlin("jvm").version(Deps.kotlinVersion).apply(false)
    kotlin("kapt").version(Deps.kotlinVersion).apply(false)
    id("org.jetbrains.kotlin.plugin.spring").version(Deps.kotlinVersion).apply(false)
    id("org.jetbrains.kotlin.plugin.jpa").version(Deps.kotlinVersion).apply(false)
    id("org.jetbrains.kotlin.plugin.noarg").version(Deps.kotlinVersion).apply(false)
    id("org.jetbrains.kotlin.plugin.allopen").version(Deps.kotlinVersion).apply(false)
    id("org.springframework.boot").version(Deps.springBootVersion).apply(false)
    id("com.github.node-gradle.node") version "2.0.0" apply false
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven("http://maven.aliyun.com/nexus/content/groups/public/")
    maven("http://47.103.89.201:8081/repository/maven-public/")
}

allprojects {
    group = "com.senriot"
    version = "0.0.1"
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven("http://maven.aliyun.com/nexus/content/groups/public/")
        maven("http://47.103.89.201:8081/repository/maven-public/")
    }
}

subprojects {
    apply<KotlinPlatformJvmPlugin>()
    dependencies {
        val implementation by configurations
        implementation(platform("io.github.jhipster:jhipster-dependencies:${Deps.jhipster_dependencies_version}"))
        implementation(platform("com.alibaba.cloud:spring-cloud-alibaba-dependencies:2.1.0.RELEASE"))
    }

    tasks.withType<KotlinCompile>().configureEach {
        println("Configuring $name in project ${project.name}...")
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = listOf("-Xjsr305=strict", "-Xjvm-default=compatibility", "-Xallow-result-return-type")
        }
    }
    tasks.withType<Test> {
        useJUnitPlatform()
    }
}
